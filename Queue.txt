/* Queue: a Queue is a lingear structure which follows a particular Order 
in which the operations are performed. The order is First In First Out (FIFO)
*/

Learning Doc Javascript Data structure And algorithms
Learning Doc https://www.w3schools.com/dsa/dsa_data_queues.php

/* Queue is commonly used for scheduling taks, incoming calls, email listing, printer, buffer cpu and keyboard Cpu Scheduling
Cashier line in stores, Disk Scheduling, Serving request
a queue is a waiting line or lineup of taks, requests, or interactions that are pending

processing or handling, commonly used in contact centers
*/

/*
FIFO principle states that the first element added to the Queue will be the first one to be 
removed or processed. So, Queue is like a linke of people waiting to purchase tickets, where 
the first person in line is the first person served. "First Come First Serve" */

/*
Terminologies of Queue
- "Fron"t: position of the entry in a queue ready to be served, that is, the first entry that will be removed from the queue, is called front or the head of the queue.
- "Rear": position is that last in Queue is the recently added
- "Size": refers to the current number of elements in the queue.
- "Capacity": referces to the maximum the number elements queue can hold

Enqueue: add (an item of data awaiting processing) to a queue of such items.

1. Enqueue:
Enqueue operation adds (or stores) an element to the end of the queue.
Steps:
1. Check if the queue is full. if so, return an overflow error and exit
2. If the queue is not full, increment the rear pointer to the next available position
3. Insert the element at the rear.

2. Dequeue:
Dequeue operation removes the element at the front of the queue. The following steps are taken to perform the dequeue operation
1. Check if the queue is empty. If so, return an underflow error.
2. Remove the elment at the front
3. Increment the front pointer to the next element

3. Peak or Front Operation: 
this operaturn returns the element at the front end without removing item

4. Size Operation
this operation returns the numbers of elements present in the queue

5. isEmpty Operation:
This operations returns a boolean value that indicates whether the queue is empty or not

6. isFull Operation:
This operation returns a boolean value that indicates whether the queue is full or not.

Implemention of queue Data Structure 
queue can be implemented using follwoing data structures: 
- Arrays 
- Linked Lists

Operation
Enqueue: Time Complexity: 0(1)
Enqueue: Space Complexity: 0(1)
Dequeue: Time Complexity: 0(1)
Dequeue: Space Complexity: 0(1)
Front: Time Complexity: 0(1)
Front: Space Complexity: 0(1)
Size: Time Complexity: 0(1)
Size: Space Complexity: 0(1)
isEmpty: Time Complexity: 0(1)
isEmpty: Space Complexity: 0(1)
isFull: Time Complexity: 0(1)
isFull: Space Complexity: 0(1)

Types of Queues 
queue data structure can be classified into 4 types:

1. Simple Queue: Simple Queue simply follows FIFO strucutre. we can only 
insert the element at the back and remove the lement from the front of the queue

2. Double-Ended Queue (Deque): in a double-ended queue the insertion and deletion
operations, both can be performed from both ends. They are of two types:

    - Input Restricted Queue: This is a simple queue. In this type of queue, the input can be taken
    from only one end but deletion can be done from any of the ends

    - Output Restricted Queue: This is also a simple queue. In this type of queue,
    the input can be taken from both ends but deltion can be done from only one end.

3. Circular Queue: This is a special type of queue where the last position is connected back to the first position. here also the operations 
are performed in FIFO order.

4. Priority Queue: A Priority queue is a special queue where the elements are accessed
based on the priority assigned to them. They are of two types

    - Ascending Priority Queue: in Ascending Priority Queue, the elements are arranged in increasing order of their priority values. Element 
    with smallest priority value is popped first

    - Descending Priority Queue: in Descending Priority Queue, the elements are arranged in decreasing order of their priority values. Element with 
    largest priority is popped first.

 Types of Queue 
    - Simple Queue 
    - Double Ended Queue = Input Restricted + Output Restricted Queue
    - Circular Queue
    - Priority Queue - Ascending Priority Queue + Descending Priority Queue

Types of Queue more detail

    1. Double Ended Deque
        - Deque or Double Ended Queue is generalized version of Queue data strucutre that allows insert and delete at both ends
        Operation Lists
        push_front() = inserts the element at the beginning
        push_back() = adds element at the end
        pop_front() = Removes the first element from the deque
        pop_back() = Removes the last element from the deque
        front() = gets the front element from the deque
        back() = gets the last element from the deque
        empty() = checks whether the deque is empty or not
        size() = determines the number of elements in the deque

    other Operation not as import
    clear() = remove all the element from the deque. it leaves the deque with a size of 0
    erase() = remove one or more element from the deque. it takes an iterator specifying the position of the first element to be removed
        and an optional second iterator specifiying the position of the last element to be removed.
    swap() = swap the contents of one deque with another deque
    emplace_front() = insert a new element at the front of deque. it is similiar to the insert operation,
        but it avoids the copy constructor of the element being insert.
    emplace_back() = insert a new element at the back of the deque. it is similiar to the insert operation, but it avoids the copy
        constructor of the element being insert
    resize() = change the number of elements in the deque to a specific number, if the new size is larger than the current size, new elements are appended to the deque.
        if the new size is smaller than the current size, elements are removed from the deque.
    assign() = assign new values to the element in the deque. it replaces the current contents of the deque with new elements
    reverse() = reverse the order of the element in the deque
    sort() = sort the element in the deque in ascending order. it uses the less than operator to compare the elements

    Applications of Deque: Since Deque supports both stack and queue operations, it can be used as both. The Deque data structure 
    supports clockwise and anticlockwise rotations in O(1) time which can be useful in certain applications. Also, the problems where elements need to be removed and or added to both ends can be efficiently solved using Deque. 
    

    use case = 
    Task scheduler: Deques can be used to implement a task scheduler that keeps track of tasks to be executed. Tasks can be added to the back of the deque, and the scheduler can remove tasks from the front of the deque and execute them.
    
    Multi-level undo/redo functionality: Deques can be used to implement undo and redo functionality in applications. Each time a user performs an action, the current state of the application is pushed onto the deque. When the user undoes 
        an action, the front of the deque is popped, and the previous state is restored. When the user redoes an action, the next state is popped from the deque.
    
 
 2. Circular Queue = Is circualr data structure of normal Queue where the last data is connected to the first node in circular clockwises, Known as "Ring Buffer" as type of buffers "Circular Buffer", "Gap Buffer"
    - getFront: get the front item from the queue
    - getRear: get the last item from the queue
    - enqueue(value): to insert an element into the circular queue. in a circular queue, the new element is always inserted at the rear position
    - dequeue(): to delete an element from the circular Queue. in a circular queue, the element is always deleted from the front position

    implement circular queue using Arrays
        1 - initalize an array of size n, where n is the maximum number of elements that the queue can hold
        2 - intialize three variables (size, capacity, and front)
        3 - Enqueue: to enqueue an element x into the queue, do the following
            1. Check if size == capacity (queue is full), display "queue is full"
            2. if not full: calculate rear = (front + size) % capacity and insert value at the rear index. increment size by 1
        4. Dequeue: to dequeue an element from the queue, do the following
            1. check if size == 0 (queue is empty), display "Queue is Empty".
            2. if not empty: retrive the element at the fornt index and move front = (front + 1) % capacity. also decremenet size by 1 and return the removed element 

