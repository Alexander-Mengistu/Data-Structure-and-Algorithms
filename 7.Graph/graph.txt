Graph Algorithms 

Graph algorithms are methods used to manipulate and anaylze graphs, solving various range of problems like "finding
the shortest path, cycle detection.

Graph Data structure is a non-linear data structure consisting of vertices and edges. it is useful in fields such as 
social netowrk analysis, recommendation systems, and computer networks. in the field of sports data science, graph data 
structure can be used to analyze and understand dynamics of team performance and players interaction on fields

              (1)
              /  \
    (5)---(3)    (2)--(6)
             \    /
              (4)

() = Nodes also knwon as Vertices
-  = lines are know as edges or arc, they connect 2 nodes together.

Notation 
G = Graph
V = Vertics 
E = Edges

G=(V,E)

- Components of Graph Data Structure
Vertices = Vertices are the fundamental units of the graph. Sometimes, vertices are also known as vertex or nodes. Every node/vertex can be labeled or unlabelled.
Edges = Edges are drawn or used to connect two nodes of the graph. It can be ordered pair of nodes in a directed graph. Edges can connect any two nodes in any possible way. There are no rules. Sometimes, edges are also known as arcs. Every edge can be labelled/unlabelled.

- Types of graphs Data Structure
    1. Null Graph
    a graph with null, if there is no edges
         (3)                                           (2) <---- Trivial Graph
    (5)       (1) <---- Null Graph
         (4)


    2. Trivial Graph 
    Graph having only a single vertex, it is also the smallest graph possible.

    3. Unidrected Graph 
    A graph in which edges do not have any direction. That is the nodes are unorded pairs in the definition of every edge.

    4. Directed Graph
    A graph in which edge has direction. That is the nodes are ordered pairs in the definition of every edge.
     Undirected Graph                       Directed Graph
           (3)                                    (3)
        /      \                               /      \     <--edges have direction example 3 -> 1 -> 4 -> 5:
      (5)      (1)                            (5)     (1)
        \      /                                \     /
           (4)                                    (4)

    5. Connected graph
    The graph in which from one node we can visit any other node in the graph is known as connected graph

    6. Discounnected graph 
    At least one node is not reachable from a node is known as a disconnected graph

    7. Regular Graph
    The graph in which the degree of every vertex is equal to K is called K regular graph.

    8. Complete Graph
    the graph in which from each node there is an edge to each other node.

    9. Cycle Graph 
    the graph in which the graph is a cycle in itself, the minimum value of degree of each vertex is 2.

             (3)                   (3)
           /     \               /  |   \
         (4)     (2)           (2)------(5)
           \     /               \  |  /
             (2)                   (2)
          2-Regular           Complete Graph

    10. Cyclic Graph
    The graph in which the graph is a cycle in itself, the minimum value of degree of each vertex is 2.

             (3)                   (3)
           /     \               /  |   \
         (4)     (2)           (2)  |   (5)
           \     /                  |  /
             (2)                   (2)
          Cycle Graph           Cyclic Graph

    11. Directed Acyclic Graph
    A directed graph that does not contain any cycle.

    12. Bipartitle Graph
    A graph in which vertex can be divided into two sets such that vertexc in each set does not contain any edge between them

    13. . Weighted Graph
    A graph in which the edges are already specified with suitable weight is known as a weighted graph. 
    Weighted graphs can be further classified as directed weighted graphs and undirected weighted graphs. 

    Represention of graph data structure
    Multiple ways can store a graph
        - Adjacency Matrix
        - Adjacency List

    - Adjacency Matrix =
    In this method, the graph is stored in the form of the 2d matrix where rows and columns denote vertices. Each
    entry in the matrix represents the weigh of the edge between those vertices     
                                   |0 |1 |2 |3 |
    (0)---(1)                     0|0 |1 |1 |0 |     
     |    /                       1|1 |0 |1 |0 | 
     |   /                        2|1 |1 |0 |1 | 
     | /                          3|0 |0 |1 |0 | 
     |/___(3)
     
     - Adjacency List
     This graph is represented as a collection of linked lists. There is an array of pointer whihc points to the edges connected
     to that vertex.
    (0)---(1)              |0| --->|1| --->|2|
     |    /                |1| --->|0| --->|2|          
     |   /                 |2| --->|0| --->|1| --->|3|       
     | /                   |3| --->|2| --->       
     |/___(3)


