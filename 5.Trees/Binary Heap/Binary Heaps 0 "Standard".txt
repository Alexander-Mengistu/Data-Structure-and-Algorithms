Heap is a tree that satisfies the heazp property 
    - Max-Heap: Every parent node is greater than or equal to its children
    - Min-Heap: Every parent node is less than or equal to its children, minimum access is the root.

Aspect              |Binary Tree                                  |Heap Tree           
-------------------------------------------------------------------------------------- 
Structure           |General Shape, can be unbalanced             |Complete Binary Tree(always balanced)
Node Ordering       |No specific order required                   |Must satisfy the heap proeprty (min/max)
Efficiency          |Dpends on type(e.g BST for fast, searching)  |Efficient for find max/min
Applications        |Searching, Parsing, decision-making          |Priority queues, heapsort, graph algorithms
    

Why Heap Tree? why use them? How they work? what problems they solve?

Problems that heaps can solve that other data/algorithm can solve as well however either time consuming or Time Complexity is long
say we have tasks to complete, and each task has a priority, a number represent task importance such as

task                | Importance or Priority
--------------------------------------------
Exercise            |   1
Cleaning            |   5
Wash Dishes         |   9
Email               |   4
Grocery Shopping    |   2
Reading             |   6

Say for example you want to organise tasks so can easily access those task from importance
this way of structuring data is known as Priority Queue, Collection of value where we have access to the most importan item,
how you store this data? in a data structure such as 1.Array problem with array have fixed 
length, Static arrays have their size or length determined when the array is create and/or allocated.
 that can cause you to running into problems when want to add new element into the array. 

Other solution is linked list each node has pointer to the next data, however they is a problem when comes 
to time complexity, for example if you need to insert into linked list will need to traverse through the data 
structure time consuming. 

This where Binary heaps tree solves this problem of Linked-List, as Heaps use nodes same as Linked List difference
is instead of each single node pointing to another node only its structure, heaps have parent nodes pointing to 2 single children
nodes, those childs known as left child and right child. heaps can have 2 children or single child, left node only, right node only,
or both nodes. each node in a binary heap tree obyes Invariant otherwords propertiy that will always be true, in both binary heaps or 
different type of binary tree known as min-heap.

Invariant rule
The value of any node must be less than or more than its children nodes or atleast equal tool
           4 
        /     \
       6       7
      4<6      4<7
           or
      4=6      4=7

Operation for tasks
1. Insertion 
2. Deletion

Say we want to add a new value to tree, 3, they are 2 factors 
1. Shape: What the shape of Heaps Tree will be 
2. Invariant: Nodes are not greater then they children

Idealy will want the left:1 value side, and right:1 side to be balanced, if its unblanced the heaps will be unefficient
left side 2, right side 4 however depending on the nodes in the heaps can be difficulte to be balanced, to re-account for that
will have 1 extra node, on the unbalnced side, 

step 1. balanced but we want to add 1 more, to the tree 1 more node will make it unblance, thats why add one 
more on step 2.
           0 
        /     \
       0       0

step 2. add a extra node, 
Remeberer to always to add to the left node before the right node.
           0 
        /     \
       0       0
      /       
     0  <----- the node we wanted to adds

step 3. The extra node to balance the node, The fith node must be the child of the 3 node
           0 
        /     \
       0       0
      /       /
     0       0 <---5th node

step 4. Missing information solve later 
This is the shape to maintain
                 0
              /     \
             0       0
           /   \   /   \
          0    0  0     0









----------------Insertion
say you add a new node to this
                 4                        âˆ†
              /     \                     |
             6       7                    |   when you insert element and the heaps invarient isnt satisfied
           /   \   /   \                  |   will need to sort from bottom to top
          8    11 9     10                |
        /                                 |
       5                                  |

The Invarient rule is broken as 8 > 5, so we need to make adjustment to the tree, 
if the invarient is greater then the parent swap the node

Step 1. one to fix "Invarient"
                 4
              /     \
             6       7
           /   \   /   \
          5    11 9     10
        /
       8

Step 2. one to fix "Invarient"
                 4
              /     \
             5       7
           /   \   /   \
          6    11 9     10
        /
       8
when we reach a node that the parent node is not greater than the child
say for example you have the smallest value in the heaps tree down in the leafs in that case can swap all the way up to the root.

-----------------Deletion
Since Heaps Tree is only meant to give us access to the minimum tree, thats the only one we allowed to delete.

                 2        <---Can only delete root. but when we remove it will make the heaps tree unbalanced.
              /     \      this will result in heaps not in the correct shape, to fix this, first get heaps in correct shape using recursion
             3       4
           /   \   /   \
          6    5  7     10
         /     /  /     
        8     11 9  


Step 1. get the heaps in correct shape after deleting the root minimum access
                         
              /     \      
             3       4
           /   \   /   \
          6    5  7     10
         /     /  /     
        8     11 9  

Step 2. satisfy the invarient rule ,if the heaps is unbalanced take node from the leaf to balance it 
take a element from the bottom, to the root, remeber if its even take from the right side first, before the left.
                 11     <---- even tho the shape is satisfied, the invarient rule isnt 
              /     \      
             3       4
           /   \   /   \
          6    5  7     10
         /        /     
        8        9 

Remeberer when you inserting to heaps start sort from the bottom to the top, but when deleting from heaps sort from top to bottom
                 11                    |
              /     \                  |
             3       4                 |   in deletion you sort from top to bottom
           /   \   /   \               |
          6    5  7     10             |
         /        /                    |
        8        9                     v

step 3 take the smallest child and make it the right

                 3     
              /     \      
             11       4
           /   \   /   \
          6    5  7     10
         /        /     
        8        9 

step 4 take the smallest child and make it the right

                 3     
              /     \      
             5       4
           /   \   /   \
          6    11  7     10
         /        /     
        8        9 

Remeber invarient is satisfied when the larger value is on the leaf or satisfies the rule.

The reason heaps is better than linked list is because heaps is dynmaic able to change and sort itself, when element is removed.
and the fact that heaps always have to obey the 1.shape and 2.invarient rule makes it logical and efficient to search find.
example root is always the prioerity, fact that left side is less than the root, and right side is more than the root speeds the process of search.


Binary Heap is a "Complete Binary Tree" which is used to store data efficiently to get the max or min element based on its value its type.
A Binary Heap is either Min Heap or Max heap. In a min Binary Heap, the key at the root must be minimum among all keys present in binary heaps.
The same property must be recursively true for all nodes in Binary Tree. Max Binary heap is similiar to Min Heap.

How is Binary Heap represented? 
A Binary Heap is a Complete Binary Tree. A binary heap is typically represented as an array.

The root element will be at arr[0].
The below table shows indices of other nodes for the ith node, i.e., arr[i]:
arr[(i-1)/2]	Returns the parent node
---------------------------------------------- 
| arr[(2*i)+1] | Returns the left child node  |
| arr[(2*i)+2] | Returns the right child node |
______________________________________________

The Traversal methods use to achieve Array representation is Level Order      ____________
          1                               how will look like in array format. |1|3|6|5|9|8
       /     \                                                                ------------
      3       6
    /  \     /
   5    9   8

Operations on Heap;
 - getMin(): it returns the root element of Min Heap. The time Complexity of this operation is O(1). In case of a maxheap it would be getMax()

 - extractMin(): Removes the minimum element from MinHeap. THe time Complexity of this Operation is O(log N) as the operation needs to maintain the heap proerpty (by 
 calling "Heapify()) after removing the root 

 - decreaseKey(): Decreases the value of the key. The time Complexity of this operation is O(log N). If the decreased key value of a node is greater than the parent of the node
 then we dont need to do anything. Otherwise, we need to traverse up to fixthe violoated heap property.

 - Insert(): Inserting a new key takes O(log N) time. We add a new key at the end of the end tree. If the new key is greater than its parent, then we dont need to do anything.
 otherwise, we need to traverse up to fix the violated heap property.

 - Delete(): deleting a key also takes O(log N) time. We replace the key to be deleted with the minimum infinite by calling "DecreaseKey(). After decreaseKey(). The minus 
 ifinite value must reach root, so we call extractMin() to remove the key
